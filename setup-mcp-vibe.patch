*** Begin Patch
*** Add File: .github/ISSUE_TEMPLATE/feature.yml
+name: Feature / Task
+description: DoR/DoD 付きの実装タスク（VIBE-KANBAN→Codex CLI 連携向け）
+title: "[feature] <scope>: <short title>"
+labels: ["Ready", "priority-mid", "sprint-1"]
+body:
+  - type: textarea
+    id: background
+    attributes:
+      label: 背景 / Context
+      description: なぜ必要か。関連リンク（仕様書・議事録URLなど）
+    validations:
+      required: true
+  - type: textarea
+    id: dor
+    attributes:
+      label: DoR（着手条件）
+      description: 前提・スコープ・非目標・テスト観点の素案
+      value: |
+        - 前提:
+        - スコープ:
+        - 非目標:
+        - 受入観点(案):
+    validations:
+      required: true
+  - type: textarea
+    id: spec
+    attributes:
+      label: 仕様 / 受入観点(DoD)
+      description: 完了の姿。確認コマンド、期待ログ、成果物パスまで明記
+      value: |
+        - 実装概要:
+        - 確認コマンド:
+        - 期待ログ/出力:
+        - 成果物パス:
+        - DoD チェックリスト:
+    validations:
+      required: true
+  - type: dropdown
+    id: priority
+    attributes:
+      label: 優先度
+      options:
+        - priority-high
+        - priority-mid
+        - priority-low
+    validations:
+      required: true
+  - type: input
+    id: estimate
+    attributes:
+      label: 見積（h）
+      placeholder: "例: 4"
+
*** End Patch
*** Begin Patch
*** Add File: .github/pull_request_template.md
+## 概要
+- 変更点:
+- 関連Issue: #
+
+## テスト
+- コマンド:
+- 期待結果:
+
+## 影響範囲 / リスク / ロールバック
+- 影響範囲:
+- リスク:
+- ロールバック手順:
+
+## チェックリスト（DoD）
+- [ ] CI green（lint/format/mypy/pytest）
+- [ ] スキーマ互換性チェックに合格（破壊変更なし）
+- [ ] ラベル確認（例: sprint-1 / 種別ラベル）
+- [ ] ドキュメント/サンプル更新
+
*** End Patch
*** Begin Patch
*** Add File: .github/workflows/nightly.yml
+name: Nightly Crawler
+on:
+  schedule:
+    - cron: '30 18 * * *' # JST 03:30 相当（UTC 18:30）
+  workflow_dispatch: {}
+
+jobs:
+  crawl-and-validate:
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        python-version: [3.9, '3.10', '3.11']
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with:
+          python-version: ${{ matrix.python-version }}
+      - name: Install deps
+        run: |
+          python -m pip install --upgrade pip
+          pip install poetry
+          poetry install --no-interaction --no-root
+      - name: Run crawler (demo)
+        run: |
+          poetry run python crawler/itabashi_spider.py || true
+      - name: Validate schema (if any)
+        run: |
+          if [ -f schemas/minutes.schema.json ] && [ -f crawler/sample/sample_minutes.json ]; then
+            poetry run python - <<'PY'
+import json
+from jsonschema import validate
+schema=json.load(open('schemas/minutes.schema.json'))
+data=json.load(open('crawler/sample/sample_minutes.json'))
+items = data if isinstance(data, list) else [data]
+for item in items:
+    validate(item, schema)
+print('schema validation ok')
+PY
+          fi
+
*** End Patch
*** Begin Patch
*** Add File: .mcp/tools/github-issues.schema.json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "github-issues",
+  "type": "object",
+  "properties": {
+    "issues.create": {
+      "type": "object",
+      "properties": {
+        "title": { "type": "string" },
+        "body": { "type": "string" },
+        "labels": { "type": "array", "items": { "type": "string" } },
+        "assignees": { "type": "array", "items": { "type": "string" } },
+        "project": { "type": "string" },
+        "estimate": { "type": ["number","string"] }
+      },
+      "required": ["title"]
+    },
+    "issues.update": {
+      "type": "object",
+      "properties": {
+        "number": { "type": "integer" },
+        "title": { "type": "string" },
+        "body": { "type": "string" },
+        "state": { "type": "string", "enum": ["open","closed"] },
+        "labels": { "type": "array", "items": { "type": "string" } }
+      },
+      "required": ["number"]
+    },
+    "issues.link_pr": {
+      "type": "object",
+      "properties": {
+        "issue": { "type": "integer" },
+        "pr": { "type": "integer" }
+      },
+      "required": ["issue","pr"]
+    }
+  }
+}
+
*** End Patch
*** Begin Patch
*** Add File: .mcp/tools/repo-ops.schema.json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "repo-ops",
+  "type": "object",
+  "properties": {
+    "repo.read": {
+      "type": "object",
+      "properties": { "path": { "type": "string" } },
+      "required": ["path"]
+    },
+    "repo.write": {
+      "type": "object",
+      "properties": {
+        "path": { "type": "string" },
+        "content": { "type": "string" },
+        "mode": {
+          "type": "string",
+          "enum": ["overwrite", "append", "create-if-missing", "fail-if-exists"]
+        },
+        "dryRun": { "type": "boolean", "default": false }
+      },
+      "required": ["path","content"]
+    }
+  }
+}
+
*** End Patch
*** Begin Patch
*** Add File: .mcp/tools/quality-gates.schema.json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "quality-gates",
+  "type": "object",
+  "properties": {
+    "quality.check_dor": {
+      "type": "object",
+      "properties": { "issue": { "type": "integer" } },
+      "required": ["issue"]
+    },
+    "quality.check_dod": {
+      "type": "object",
+      "properties": { "pr": { "type": "integer" } },
+      "required": ["pr"]
+    },
+    "quality.lint": {
+      "type": "object",
+      "properties": {
+        "paths": { "type": "array", "items": { "type": "string" } },
+        "strict": { "type": "boolean", "default": true }
+      },
+      "required": ["paths"]
+    },
+    "quality.schema_validate": {
+      "type": "object",
+      "properties": {
+        "schema": { "type": "string" },
+        "data": { "type": "string" }
+      },
+      "required": ["schema","data"]
+    }
+  }
+}
+
*** End Patch
