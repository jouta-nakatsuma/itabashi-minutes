@@
 class ItabashiMinutesCrawler:
     def __init__(self, config: Optional[Config] = None) -> None:
         self.config = config or Config()
@@
         self.session = requests.Session()
         self.session.headers.update({"User-Agent": self.config.user_agent})
         self.robots = self._load_robots()
 
+    # Public API expected by tests: iterable of minutes
+    def crawl(
+        self,
+        max_pages: Optional[int] = None,
+        max_items: Optional[int] = None,
+    ):
+        """
+        Iterate minutes using current config, allowing temporary overrides.
+        Yields dict records compatible with minutes.schema.json projection.
+        """
+        orig_pages, orig_items = self.config.max_pages, self.config.max_items
+        if max_pages is not None:
+            self.config.max_pages = max_pages
+        if max_items is not None:
+            self.config.max_items = max_items
+        try:
+            for rec in self.get_latest_fiscal_year_minutes():
+                yield rec
+        finally:
+            self.config.max_pages, self.config.max_items = orig_pages, orig_items
